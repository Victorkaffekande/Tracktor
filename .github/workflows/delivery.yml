name: delivery

on:
  push:
    branches: [ continuous-delivery ]
  
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'

jobs:
  get-version-gateway:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Retrieve last image version and update it
        id: get_version
        run: |
          response=$(curl -s https://registry.hub.docker.com/v2/repositories/magnusovergaard/gateway/tags/?page_size=1)
          last_version=$(echo "$response" | jq -r '.results[0].name' | cut -d'-' -f2 | tr -d '"')
          new_version=$((last_version + 1))
          tag="magnusovergaard/gateway:$new_version"
          echo "New version: $new_version"
          echo "Tag: $tag"
          echo "::set-output name=tag::$tag"

  build-and-push-gateway:
    runs-on: ubuntu-latest
    needs: get-version-gateway
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Gateway
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployable projects/Gateway/Dockerfile
          push: true
          tags: ${{ needs.get-version-gateway.outputs.tag }}
  
  get-version-alarm-api:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Retrieve last image version and update it
        id: get_version
        run: |
          response=$(curl -s https://registry.hub.docker.com/v2/repositories/magnusovergaard/alarm-api/tags/?page_size=1)
          last_version=$(echo "$response" | jq -r '.results[0].name' | cut -d'-' -f2 | tr -d '"')
          new_version=$((last_version + 1))
          tag="magnusovergaard/alarm-api:$new_version"
          echo "New version: $new_version"
          echo "Tag: $tag"
          echo "::set-output name=tag::$tag"

  build-and-push-alarm-api:
    runs-on: ubuntu-latest
    needs: get-version-alarm-api
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push AlarmApi
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployable projects/AlarmAPI/Dockerfile
          push: true
          tags: ${{ needs.get-version-alarm-api.outputs.tag }}
  
  get-version-alarm-consumer:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Retrieve last image version and update it
        id: get_version
        run: |
          response=$(curl -s https://registry.hub.docker.com/v2/repositories/magnusovergaard/alarm_consumer/tags/?page_size=1)
          last_version=$(echo "$response" | jq -r '.results[0].name' | cut -d'-' -f2 | tr -d '"')
          new_version=$((last_version + 1))
          tag="magnusovergaard/alarm_consumer:$new_version"
          echo "New version: $new_version"
          echo "Tag: $tag"
          echo "::set-output name=tag::$tag"

  build-and-push-alarm-consumer:
    runs-on: ubuntu-latest
    needs: get-version-alarm-consumer
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push AlarmConsumer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployable projects/AlarmConsumer/Dockerfile
          push: true
          tags: ${{ needs.get-version-alarm-consumer.outputs.tag }}
          
  get-version-location-api:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Retrieve last image version and update it
        id: get_version
        run: |
          response=$(curl -s https://registry.hub.docker.com/v2/repositories/magnusovergaard/location-api/tags/?page_size=1)
          last_version=$(echo "$response" | jq -r '.results[0].name' | cut -d'-' -f2 | tr -d '"')
          new_version=$((last_version + 1))
          tag="magnusovergaard/location-api:$new_version"
          echo "New version: $new_version"
          echo "Tag: $tag"
          echo "::set-output name=tag::$tag"

  build-and-push-location-api:
    runs-on: ubuntu-latest
    needs: get-version-location-api
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push locationApi
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployable projects/LocationAPI/Dockerfile
          push: true
          tags: ${{ needs.get-version-location-api.outputs.tag }}        
    
  get-version-location-consumer:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Retrieve last image version and update it
        id: get_version
        run: |
          response=$(curl -s https://registry.hub.docker.com/v2/repositories/magnusovergaard/location-consumer/tags/?page_size=1)
          last_version=$(echo "$response" | jq -r '.results[0].name' | cut -d'-' -f2 | tr -d '"')
          new_version=$((last_version + 1))
          tag="magnusovergaard/location-consumer:$new_version"
          echo "New version: $new_version"
          echo "Tag: $tag"
          echo "::set-output name=tag::$tag"

  build-and-push-location-consumer:
    runs-on: ubuntu-latest
    needs: get-version-location-consumer
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push LocationConsumer
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployable projects/LocationConsumer/Dockerfile
          push: true
          tags: ${{ needs.get-version-location-consumer.outputs.tag }}
  
  get-version-location-retrieval-api:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
    steps:
      - name: Retrieve last image version and update it
        id: get_version
        run: |
          response=$(curl -s https://registry.hub.docker.com/v2/repositories/magnusovergaard/location-retrieval-api/tags/?page_size=1)
          last_version=$(echo "$response" | jq -r '.results[0].name' | cut -d'-' -f2 | tr -d '"')
          new_version=$((last_version + 1))
          tag="magnusovergaard/location-retrieval-api:$new_version"
          echo "New version: $new_version"
          echo "Tag: $tag"
          echo "::set-output name=tag::$tag"
  
  build-and-push-location-retrieval-api:
    runs-on: ubuntu-latest
    needs: get-version-location-retrieval-api
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push LocationRetrievalApi
        uses: docker/build-push-action@v4
        with:
          context: .
          file: deployable projects/LocationRetrievalApi/Dockerfile
          push: true
          tags: ${{ needs.get-version-location-retrieval-api.outputs.tag }}